import os
import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
CUSTOM_RANGE = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("messages.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            chat_id INTEGER, user_id INTEGER, username TEXT, message_time TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def save_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.chat.type in ['group', 'supergroup']:
        conn = sqlite3.connect("messages.db")
        c = conn.cursor()
        c.execute("INSERT INTO messages VALUES (?, ?, ?, ?)", (
            update.message.chat_id,
            update.message.from_user.id,
            update.message.from_user.username or update.message.from_user.first_name,
            update.message.date.strftime("%Y-%m-%d %H:%M:%S")
        ))
        conn.commit()
        conn.close()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ /stats —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="1")],
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="7")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="30")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã", callback_data="custom")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=InlineKeyboardMarkup(keyboard))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    conn = sqlite3.connect("messages.db")
    c = conn.cursor()

    if query.data == "custom":
        await query.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-05-01 2024-05-10")
        return CUSTOM_RANGE

    days = int(query.data)
    since = (datetime.utcnow() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    c.execute("""
        SELECT username, COUNT(*) FROM messages
        WHERE chat_id = ? AND message_time >= ?
        GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 10
    """, (chat_id, since))
    rows = c.fetchall()
    conn.close()

    if rows:
        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n"
        response += '\n'.join([f"{u} ‚Äî {c}" for u, c in rows])
    else:
        response = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."

    await query.message.reply_text(response)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
async def custom_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        start_date, end_date = update.message.text.split()
        chat_id = update.message.chat_id
        conn = sqlite3.connect("messages.db")
        c = conn.cursor()
        c.execute("""
            SELECT username, COUNT(*) FROM messages
            WHERE chat_id = ? AND message_time BETWEEN ? AND ?
            GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 10
        """, (chat_id, start_date + " 00:00:00", end_date + " 23:59:59"))
        rows = c.fetchall()
        conn.close()

        if rows:
            response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {start_date} –ø–æ {end_date}:\n"
            response += '\n'.join([f"{u} ‚Äî {c}" for u, c in rows])
        else:
            response = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."

        await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: `2024-05-01 2024-05-10`", parse_mode='Markdown')

    return ConversationHandler.END

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("stats", stats))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_message))

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(stats_callback)],
    states={CUSTOM_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_range)]},
    fallbacks=[],
)
app.add_handler(conv_handler)

if __name__ == "__main__":
    import asyncio
    async def run():
        await app.bot.delete_webhook()
        await app.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 10000)),
            webhook_url=os.environ["APP_URL"] + "/webhook"
        )
    asyncio.get_event_loop().run_until_complete(run())
