import os
import sqlite3
import logging
from datetime import datetime, timedelta

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, ConversationHandler
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –°—Ç–µ–π—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
WAITING_FOR_DATES = range(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def init_db():
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            chat_id INTEGER,
            user_id INTEGER,
            username TEXT,
            message_time TEXT
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
def save_message(chat_id, user_id, username, message_time):
    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute("INSERT INTO messages VALUES (?, ?, ?, ?)", (chat_id, user_id, username, message_time))
    conn.commit()
    conn.close()

# /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ üìä")

# –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.chat.type in ['group', 'supergroup']:
        chat_id = update.message.chat.id
        user_id = update.message.from_user.id
        username = update.message.from_user.username or update.message.from_user.full_name
        message_time = update.message.date.strftime('%Y-%m-%d %H:%M:%S')
        save_message(chat_id, user_id, username, message_time)

# /stats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ 1 –¥–µ–Ω—å", callback_data="1d"),
         InlineKeyboardButton("üìÜ 7 –¥–Ω–µ–π", callback_data="7d")],
        [InlineKeyboardButton("üìä 30 –¥–Ω–µ–π", callback_data="30d"),
         InlineKeyboardButton("üìå –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="custom")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if query.data == "custom":
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `2024-05-01 2024-05-10`", parse_mode='Markdown')
        return WAITING_FOR_DATES

    days = int(query.data.replace("d", ""))
    since = datetime.utcnow() - timedelta(days=days)
    return await send_stats(query.message, chat_id, since)

# –í–≤–æ–¥ –¥–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_custom_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_from_str, date_to_str = update.message.text.strip().split()
        date_from = datetime.strptime(date_from_str, "%Y-%m-%d")
        date_to = datetime.strptime(date_to_str, "%Y-%m-%d") + timedelta(days=1)
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: `2024-05-01 2024-05-10`", parse_mode='Markdown')
        return WAITING_FOR_DATES

    return await send_stats(update.message, update.message.chat.id, date_from, date_to)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def send_stats(message, chat_id, date_from, date_to=None):
    date_to = date_to or datetime.utcnow()

    conn = sqlite3.connect('messages.db')
    c = conn.cursor()
    c.execute('''
        SELECT username, COUNT(*) FROM messages
        WHERE chat_id = ? AND message_time >= ? AND message_time < ?
        GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 10
    ''', (chat_id, date_from.isoformat(), date_to.isoformat()))
    rows = c.fetchall()
    conn.close()

    if not rows:
        await message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return ConversationHandler.END

    if date_to - date_from >= timedelta(days=30):
        period_text = f"—Å {date_from.strftime('%Y-%m-%d')} –ø–æ {(date_to - timedelta(days=1)).strftime('%Y-%m-%d')}"
    else:
        period_text = f"–∑–∞ –ø–µ—Ä–∏–æ–¥"

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π {period_text}:\n\n"
    for username, count in rows:
        text += f"‚Äî {username}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.reply_text(text)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# main
def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CallbackQueryHandler(handle_callback))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_callback, pattern="custom")],
        states={WAITING_FOR_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_dates)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)

    app.add_handler(MessageHandler(filters.ALL, message_handler))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
